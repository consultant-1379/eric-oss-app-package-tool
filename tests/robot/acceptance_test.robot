*** Settings ***
Library  ArchiveLibrary
Library  keywords.py
Library  String
Library  OperatingSystem
Test Setup  Extract Zip File    acceptance.csar    ${CURDIR}${/}output
Suite Teardown   Remove Directory     ${CURDIR}${/}output     recursive=True

*** Test Cases ***
Extract CSAR, generate and compare file digests, check signature exists, check mapping file exists
      File Should Exist    ${CURDIR}${/}output${/}acceptance.mf
      ${csar_files_and_digests} =  read csar     ${CURDIR}${/}output
      ${manifest_files_and_digests} =  create dict of files and hashes    ${CURDIR}${/}output${/}acceptance.mf
      ${file_and_digest_equality} =  compare dicts  ${csar_files_and_digests}    ${manifest_files_and_digests}
      should be equal as integers  ${file_and_digest_equality}     0
      log     'SHA512 digests for all files are equal'
      File Should Exist    ${CURDIR}${/}output${/}acceptance.mf
      ${signature} =    reading manifest for signature   ${CURDIR}${/}output${/}acceptance.mf
      ${length}=  Get Length    ${signature}
      should be true  ${length}>0
      log     'Signature exists'
      File Should Exist   ${CURDIR}${/}output${/}OtherDefinitions${/}ASD${/}scaling_mapping.yaml
      log     'Mapping file exists'
      [Teardown]  Remove Directory     ${CURDIR}${/}output    recursive=True

Extract CSAR generated by Helm 3, generate and compare file digests
      [Setup]  Extract Zip File    acceptance-helm3.csar    ${CURDIR}${/}output-helm3
      File Should Exist    ${CURDIR}${/}output-helm3${/}acceptance.mf
      ${csar_files_and_digests} =  read csar     ${CURDIR}${/}output-helm3
      ${manifest_files_and_digests} =  create dict of files and hashes    ${CURDIR}${/}output-helm3${/}acceptance.mf
      ${file_and_digest_equality} =  compare dicts  ${csar_files_and_digests}    ${manifest_files_and_digests}
      should be equal as integers  ${file_and_digest_equality}     0
      log     'SHA512 digests for all files are equal'
      [Teardown]  Remove Directory     ${CURDIR}${/}output-helm3     recursive=True

Extract CSAR with multiple helm charts, generate and compare file digests
      [Setup]  Extract Zip File    acceptance-multi.csar    ${CURDIR}${/}output-multi
      File Should Exist    ${CURDIR}${/}output-multi${/}acceptance.mf
      ${csar_files_and_digests} =  read csar     ${CURDIR}${/}output-multi
      ${manifest_files_and_digests} =  create dict of files and hashes    ${CURDIR}${/}output-multi${/}acceptance.mf
      ${file_and_digest_equality} =  compare dicts  ${csar_files_and_digests}    ${manifest_files_and_digests}
      should be equal as integers  ${file_and_digest_equality}     0
      log     'SHA512 digests for all files are equal'
      [Teardown]  Remove Directory     ${CURDIR}${/}output-multi     recursive=True

Extract CSAR, verify CSAR signature
    [Setup]  Extract Zip File    acceptance-type2.csar    ${CURDIR}${/}output-type2
    ${exit_code} =    run verification of signature     ${CURDIR}${/}output-type2  ${CURDIR}${/}output-type2${/}pkg_acceptance-type2.csar  ${CURDIR}${/}output-type2${/}signature.csm  ${CURDIR}${/}output-type2${/}user.crt  ${CURDIR}${/}..${/}resources${/}ca.pem
    should be equal as integers  ${exit_code}     0
    [Teardown]  Remove Directory     ${CURDIR}${/}output-type2     recursive=True

Extract lightweight CSAR, verify no images
    [Setup]  Extract Zip File    lightweight.csar   ${CURDIR}${/}lightweight
    File Should Not Exist   ${CURDIR}${/}lightweight${/}Files${/}images${/}docker.tar
    File Should Exist   ${CURDIR}${/}lightweight${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    File Should Be Empty    ${CURDIR}${/}lightweight${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    [Teardown]  Remove Directory     ${CURDIR}${/}lightweight     recursive=True

Extract acceptanceA CSAR, verify output flag no output flag
    [Setup]  Extract Zip File    source/acceptanceA.csar   ${CURDIR}${/}acceptanceA
    File Should Not Exist   ${CURDIR}${/}acceptanceA${/}Files${/}images${/}docker.tar
    File Should Exist   ${CURDIR}${/}acceptanceA${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    File Should Be Empty    ${CURDIR}${/}acceptanceA${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    [Teardown]  Remove Directory     ${CURDIR}${/}acceptanceA     recursive=True

Extract acceptanceB CSAR, verify output flag relative path
    [Setup]  Extract Zip File    tmp/acceptanceB.csar   ${CURDIR}${/}acceptanceB
    File Should Not Exist   ${CURDIR}${/}acceptanceB${/}Files${/}images${/}docker.tar
    File Should Exist   ${CURDIR}${/}acceptanceB${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    File Should Be Empty    ${CURDIR}${/}acceptanceB${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    [Teardown]  Remove Directory     ${CURDIR}${/}acceptanceB     recursive=True

Extract acceptanceC CSAR, verify output flag explicit path
    [Setup]  Extract Zip File    tmp/acceptanceC.csar   ${CURDIR}${/}acceptanceC
    File Should Not Exist   ${CURDIR}${/}acceptanceC${/}Files${/}images${/}docker.tar
    File Should Exist   ${CURDIR}${/}acceptanceC${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    File Should Be Empty    ${CURDIR}${/}acceptanceC${/}OtherDefinitions${/}ASD${/}Images${/}images.txt
    [Teardown]  Remove Directory     ${CURDIR}${/}acceptanceC     recursive=True

Extract acceptanceD CSAR, verify tosca flag
    [Setup]  Extract Zip File    tmp/acceptanceD.csar   ${CURDIR}${/}acceptanceD
    File Should Exist   ${CURDIR}${/}acceptanceD${/}Metadata${/}Tosca.meta
    log     'Tosca.meta exists'
    set test variable  ${my_string}  TOSCA-Meta-File-Version
    ${my_tosca}    Get File    ${CURDIR}${/}acceptanceD${/}Metadata${/}Tosca.meta
    Should Contain    ${my_tosca}    ${my_string}
    [Teardown]  Remove Directory     ${CURDIR}${/}acceptanceD     recursive=True

